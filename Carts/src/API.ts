/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * BackendForFrontend
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export interface WriteBookReview {
  book?: Product;
  bookID?: number;
  id?: number;
  member?: Member;
  memberID?: number;
  reviewContent: string;
  reviewDate?: string;
  reviewRating?: number;
}

export interface WeatherForecast {
  date?: string;
  summary?: string | null;
  temperatureC?: number;
  readonly temperatureF?: number;
}

export interface UsedBooksLogisticsOrder {
  actualDeliveryDate?: string | null;
  estimateDeliveryDate?: string;
  id?: number;
  logisticsCompany: string;
  order?: UsedBooksOrder;
  orderID?: number;
  pickupMethod: string;
  recipientAddress: string;
  recipientName: string;
  recipientPhone: string;
  senderAddress: string;
  senderName: string;
  senderPhone: string;
  trackingNumber: string;
}

export interface UsedBooksAllocationRecord {
  allocationAccount: string;
  allocationAmount?: number;
  id?: number;
  member?: Member;
  memberID?: number;
  order?: UsedBooksOrder;
  orderID?: number;
  platformShareAmount?: number;
}

export interface UsedBooksOrder {
  buyer?: Member;
  buyerId?: number;
  id?: number;
  orderDate?: string;
  paymentMethod?: string | null;
  seller?: Member;
  sellerId?: number;
  shippingFee?: number;
  status: string;
  totalAmount?: number;
  usedBooksAllocationRecords?: UsedBooksAllocationRecord[] | null;
  usedBooksLogisticsOrders?: UsedBooksLogisticsOrder[] | null;
  usedBooksOrderDetails?: UsedBooksOrderDetail[] | null;
}

export interface UsedBook {
  bookStatus: string;
  category?: Category;
  categoryId?: number;
  description: string;
  id?: number;
  isbn: string;
  member?: Member;
  memberId?: number;
  name: string;
  picture?: string | null;
  price?: number;
  productStatus?: boolean;
  publishDate?: string | null;
  publisher?: Bookseller;
  publisherId?: number | null;
  usedBooksCarts?: UsedBooksCart[] | null;
  usedBooksOrderDetails?: UsedBooksOrderDetail[] | null;
}

export interface UsedBooksOrderDetail {
  book?: UsedBook;
  bookID?: number;
  id?: number;
  order?: UsedBooksOrder;
  orderID?: number;
  unitPrice?: number;
}

export interface UsedBooksCart {
  addToCartDate?: string;
  book?: UsedBook;
  bookID?: number;
  id?: number;
  member?: Member;
  memberID?: number;
  unitPrice?: number;
}

export interface Return {
  id?: number;
  logisticsOrder?: LogisticsOrder;
  logisticsOrderId?: number;
  member?: Member;
  memberId?: number;
  order?: Order;
  orderId?: number;
  processdDate?: string;
  quantity?: number;
  returnDate?: string;
  returnReason: string;
  status: string;
}

export interface Refund {
  amount?: number;
  applicationDate?: string;
  id?: number;
  order?: Order;
  orderId?: number;
  refundStatus: string;
}

export interface QtyflawBook {
  book?: Product;
  bookID?: number;
  handler: string;
  handlingDate?: string;
  handlingMethod: string;
  id?: number;
  reason: string;
  status: string;
}

export interface QtyBookInventory {
  buyPrice?: number;
  id?: number;
  product?: Product;
  productId?: number;
  remark?: string | null;
  state: string;
  totalQty?: number;
}

export interface ProductPicture {
  displayOrder?: number;
  id?: number;
  name: string;
  product?: Product;
  productId?: number;
}

export interface ProductKeyword {
  id?: number;
  keyword?: Keyword;
  keywordId?: number;
  product?: Product;
  productId?: number;
}

export interface PointsHistory {
  changeDate?: string;
  changeReason: string;
  id?: number;
  member?: Member;
  memberId?: number;
  pointChange?: number;
}

export interface PdInStock {
  buyDate?: string;
  buyPrice?: number;
  id?: number;
  product?: Product;
  productId?: number;
  qty?: number;
  supplier?: Bookseller;
  supplierID?: number | null;
}

export interface OrdersDto {
  discountAmount?: number | null;
  id?: number;
  memberId?: number;
  memberName?: string | null;
  message?: string | null;
  orderDate?: string;
  paymentMethod?: string | null;
  status?: string | null;
  totalAmount?: number;
}

export interface OrderDetailsDto {
  orderId?: number;
  price?: number;
  productId?: number;
  productName?: string | null;
  quantity?: number;
  unitPrice?: number;
}

export interface LogisticsOrder {
  actualDeliveryDate?: string;
  estimatedDeliveryDate?: string;
  id?: number;
  order?: Order;
  orderId?: number;
  recipientAddress: string;
  recipientName: string;
  recipientPhone: string;
  returns?: Return[] | null;
  trackingNumber: string;
}

export interface Order {
  discountAmount?: number | null;
  id?: number;
  logisticsOrders?: LogisticsOrder[] | null;
  member?: Member;
  memberId?: number;
  message?: string | null;
  orderDate?: string;
  orderDetails?: OrderDetail[] | null;
  paymentMethod: string;
  refunds?: Refund[] | null;
  returns?: Return[] | null;
  status: string;
  totalAmount?: number;
}

export interface OrderDetail {
  id?: number;
  order?: Order;
  orderId?: number;
  product?: Product;
  productId?: number;
  quantity?: number;
  unitPrice?: number;
}

export interface Keyword {
  id?: number;
  name: string;
  productKeywords?: ProductKeyword[] | null;
}

export interface Favorite {
  favoriteID?: number;
  itemID?: number | null;
  member?: Member;
  memberID?: number | null;
}

export interface EBook {
  eBooksPermissions?: EBooksPermission[] | null;
  fileLink: string;
  id?: number;
  product?: Product;
  productId?: number;
  sample: string;
}

export interface Product {
  analyzeOneBooks?: AnalyzeOneBook[] | null;
  analyzeSales?: AnalyzeSale[] | null;
  analyzeUserInteractions?: AnalyzeUserInteraction[] | null;
  bookProducts?: BookProduct[] | null;
  cartDetails?: CartDetail[] | null;
  category: string;
  description: string;
  eBooks?: EBook[] | null;
  id?: number;
  name: string;
  orderDetails?: OrderDetail[] | null;
  pdInStocks?: PdInStock[] | null;
  price?: number;
  productKeywords?: ProductKeyword[] | null;
  productPictures?: ProductPicture[] | null;
  productStatus: string;
  qtyBookInventories?: QtyBookInventory[] | null;
  qtyflawBooks?: QtyflawBook[] | null;
  stock?: number;
  writeBookReviews?: WriteBookReview[] | null;
}

export interface EBooksPermission {
  book?: EBook;
  bookID?: number;
  createDate?: string;
  id?: number;
  member?: Member;
  memberID?: number;
  permissionType?: string | null;
}

export interface Category {
  books?: Book[] | null;
  displayOrder?: number;
  id?: number;
  name: string;
  usedBooks?: UsedBook[] | null;
}

export interface CartsDto {
  discountAmount?: number | null;
  id?: number;
  memberId?: number;
  memberName?: string | null;
  message?: string | null;
  paymentMethod?: string | null;
  totalAmount?: number;
}

export interface CartDetailsDto {
  cartId?: number;
  id?: number;
  productId?: number;
  productName?: string | null;
  quantity?: number;
  unitPrice?: number;
}

export interface Cart {
  cartDetails?: CartDetail[] | null;
  discountAmount?: number | null;
  id?: number;
  member?: Member;
  memberId?: number;
  message?: string | null;
  paymentMethod: string;
  totalAmount?: number;
}

export interface CartDetail {
  cart?: Cart;
  cartId?: number;
  id?: number;
  product?: Product;
  productId?: number;
  quantity?: number;
  unitPrice?: number;
}

export interface Bookseller {
  address: string;
  bankAccount?: string | null;
  bookProducts?: BookProduct[] | null;
  compiled?: number | null;
  contactPerson: string;
  id?: number;
  name: string;
  pdInStocks?: PdInStock[] | null;
  phone: string;
  usedBooks?: UsedBook[] | null;
}

export interface BookReview {
  content: string;
  isSpoiler?: boolean;
  member?: Member;
  memberID?: number;
  rating?: string | null;
  reviewID?: number;
  reviewTime?: string;
}

export interface Member {
  address: string;
  analyzeUserInteractions?: AnalyzeUserInteraction[] | null;
  bookReviews?: BookReview[] | null;
  carts?: Cart[] | null;
  createdAt?: string;
  dateOfBirth?: string;
  eBooksPermissions?: EBooksPermission[] | null;
  email: string;
  emailVerified?: boolean;
  favorites?: Favorite[] | null;
  gender?: boolean;
  id?: number;
  membersLevel: string;
  name: string;
  orders?: Order[] | null;
  password: string;
  phoneNumber: string;
  points?: number;
  pointsHistories?: PointsHistory[] | null;
  resetToken?: string | null;
  resetTokenExpiration?: string | null;
  returns?: Return[] | null;
  usedBooks?: UsedBook[] | null;
  usedBooksAllocationRecords?: UsedBooksAllocationRecord[] | null;
  usedBooksCarts?: UsedBooksCart[] | null;
  usedBooksOrderBuyers?: UsedBooksOrder[] | null;
  usedBooksOrderSellers?: UsedBooksOrder[] | null;
  verificationCode?: string | null;
  verificationCodeExpiration?: number | null;
  writeBookReviews?: WriteBookReview[] | null;
}

export interface Book {
  author: string;
  bookProducts?: BookProduct[] | null;
  category?: Category;
  categoryID?: number;
  id?: number;
  language: string;
  name: string;
}

export interface BookProduct {
  book?: Book;
  bookId?: number;
  id?: number;
  isbn: string;
  product?: Product;
  productId?: number;
  publishDate?: string;
  publisher?: Bookseller;
  publisherId?: number;
}

export interface AnalyzeUserInteraction {
  book?: Product;
  bookID?: number;
  id?: number;
  interactionDate?: string;
  interactionType: string;
  member?: Member;
  memberID?: number;
}

export interface AnalyzeSale {
  book?: Product;
  bookID?: number;
  dateRange?: number;
  id?: number;
  quantity?: number;
  total?: number;
}

export interface AnalyzeOneBook {
  book?: Product;
  bookID?: number;
  dateRange?: number;
  id?: number;
  quantity?: number;
  salesAmount?: number;
}



type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;



export const getApiCartsApiMemberId = (
    memberId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CartsDto>> => {
    
    return axios.get(
      `/api/CartsApi/${memberId}`,options
    );
  }


export const getGetApiCartsApiMemberIdQueryKey = (memberId: number,) => {
    return [`/api/CartsApi/${memberId}`] as const;
    }

    
export const getGetApiCartsApiMemberIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiCartsApiMemberId>>, TError = AxiosError<unknown>>(memberId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCartsApiMemberId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCartsApiMemberIdQueryKey(memberId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCartsApiMemberId>>> = ({ signal }) => getApiCartsApiMemberId(memberId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(memberId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiCartsApiMemberId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiCartsApiMemberIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCartsApiMemberId>>>
export type GetApiCartsApiMemberIdQueryError = AxiosError<unknown>

export const useGetApiCartsApiMemberId = <TData = Awaited<ReturnType<typeof getApiCartsApiMemberId>>, TError = AxiosError<unknown>>(
 memberId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCartsApiMemberId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiCartsApiMemberIdQueryOptions(memberId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiCartsApi = (
    cartsDto: CartsDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    return axios.post(
      `/api/CartsApi`,
      cartsDto,options
    );
  }



export const getPostApiCartsApiMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCartsApi>>, TError,{data: CartsDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiCartsApi>>, TError,{data: CartsDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiCartsApi>>, {data: CartsDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiCartsApi(data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiCartsApiMutationResult = NonNullable<Awaited<ReturnType<typeof postApiCartsApi>>>
    export type PostApiCartsApiMutationBody = CartsDto
    export type PostApiCartsApiMutationError = AxiosError<unknown>

    export const usePostApiCartsApi = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCartsApi>>, TError,{data: CartsDto}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPostApiCartsApiMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const putApiCartsApiId = (
    id: number,
    cart: Cart, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    return axios.put(
      `/api/CartsApi/${id}`,
      cart,options
    );
  }



export const getPutApiCartsApiIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiCartsApiId>>, TError,{id: number;data: Cart}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiCartsApiId>>, TError,{id: number;data: Cart}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiCartsApiId>>, {id: number;data: Cart}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiCartsApiId(id,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiCartsApiIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiCartsApiId>>>
    export type PutApiCartsApiIdMutationBody = Cart
    export type PutApiCartsApiIdMutationError = AxiosError<unknown>

    export const usePutApiCartsApiId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiCartsApiId>>, TError,{id: number;data: Cart}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPutApiCartsApiIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiCartsApiId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/CartsApi/${id}`,options
    );
  }



export const getDeleteApiCartsApiIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCartsApiId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiCartsApiId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiCartsApiId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiCartsApiId(id,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiCartsApiIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiCartsApiId>>>
    
    export type DeleteApiCartsApiIdMutationError = AxiosError<unknown>

    export const useDeleteApiCartsApiId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCartsApiId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getDeleteApiCartsApiIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiCartsDetailsApiId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CartDetailsDto[]>> => {
    
    return axios.get(
      `/api/CartsDetailsApi/${id}`,options
    );
  }


export const getGetApiCartsDetailsApiIdQueryKey = (id: number,) => {
    return [`/api/CartsDetailsApi/${id}`] as const;
    }

    
export const getGetApiCartsDetailsApiIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiCartsDetailsApiId>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCartsDetailsApiId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCartsDetailsApiIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCartsDetailsApiId>>> = ({ signal }) => getApiCartsDetailsApiId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiCartsDetailsApiId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiCartsDetailsApiIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCartsDetailsApiId>>>
export type GetApiCartsDetailsApiIdQueryError = AxiosError<unknown>

export const useGetApiCartsDetailsApiId = <TData = Awaited<ReturnType<typeof getApiCartsDetailsApiId>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCartsDetailsApiId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiCartsDetailsApiIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiCartsDetailsApi = (
    cartDetailsDto: CartDetailsDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    return axios.post(
      `/api/CartsDetailsApi`,
      cartDetailsDto,options
    );
  }



export const getPostApiCartsDetailsApiMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCartsDetailsApi>>, TError,{data: CartDetailsDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiCartsDetailsApi>>, TError,{data: CartDetailsDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiCartsDetailsApi>>, {data: CartDetailsDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiCartsDetailsApi(data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiCartsDetailsApiMutationResult = NonNullable<Awaited<ReturnType<typeof postApiCartsDetailsApi>>>
    export type PostApiCartsDetailsApiMutationBody = CartDetailsDto
    export type PostApiCartsDetailsApiMutationError = AxiosError<unknown>

    export const usePostApiCartsDetailsApi = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiCartsDetailsApi>>, TError,{data: CartDetailsDto}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPostApiCartsDetailsApiMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const putApiCartsDetailsApiId = (
    id: number,
    cartDetail: CartDetail, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    return axios.put(
      `/api/CartsDetailsApi/${id}`,
      cartDetail,options
    );
  }



export const getPutApiCartsDetailsApiIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiCartsDetailsApiId>>, TError,{id: number;data: CartDetail}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiCartsDetailsApiId>>, TError,{id: number;data: CartDetail}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiCartsDetailsApiId>>, {id: number;data: CartDetail}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiCartsDetailsApiId(id,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiCartsDetailsApiIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiCartsDetailsApiId>>>
    export type PutApiCartsDetailsApiIdMutationBody = CartDetail
    export type PutApiCartsDetailsApiIdMutationError = AxiosError<unknown>

    export const usePutApiCartsDetailsApiId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiCartsDetailsApiId>>, TError,{id: number;data: CartDetail}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPutApiCartsDetailsApiIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiCartsDetailsApiId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/api/CartsDetailsApi/${id}`,options
    );
  }



export const getDeleteApiCartsDetailsApiIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCartsDetailsApiId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiCartsDetailsApiId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiCartsDetailsApiId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiCartsDetailsApiId(id,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiCartsDetailsApiIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiCartsDetailsApiId>>>
    
    export type DeleteApiCartsDetailsApiIdMutationError = AxiosError<unknown>

    export const useDeleteApiCartsDetailsApiId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiCartsDetailsApiId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getDeleteApiCartsDetailsApiIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiOrderApiMemberId = (
    memberId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OrdersDto>> => {
    
    return axios.get(
      `/api/OrderApi/${memberId}`,options
    );
  }


export const getGetApiOrderApiMemberIdQueryKey = (memberId: number,) => {
    return [`/api/OrderApi/${memberId}`] as const;
    }

    
export const getGetApiOrderApiMemberIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiOrderApiMemberId>>, TError = AxiosError<unknown>>(memberId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiOrderApiMemberId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOrderApiMemberIdQueryKey(memberId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrderApiMemberId>>> = ({ signal }) => getApiOrderApiMemberId(memberId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(memberId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOrderApiMemberId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiOrderApiMemberIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOrderApiMemberId>>>
export type GetApiOrderApiMemberIdQueryError = AxiosError<unknown>

export const useGetApiOrderApiMemberId = <TData = Awaited<ReturnType<typeof getApiOrderApiMemberId>>, TError = AxiosError<unknown>>(
 memberId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiOrderApiMemberId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiOrderApiMemberIdQueryOptions(memberId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiOrderApi = (
    ordersDto: OrdersDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    return axios.post(
      `/api/OrderApi`,
      ordersDto,options
    );
  }



export const getPostApiOrderApiMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderApi>>, TError,{data: OrdersDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiOrderApi>>, TError,{data: OrdersDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOrderApi>>, {data: OrdersDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiOrderApi(data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiOrderApiMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOrderApi>>>
    export type PostApiOrderApiMutationBody = OrdersDto
    export type PostApiOrderApiMutationError = AxiosError<unknown>

    export const usePostApiOrderApi = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderApi>>, TError,{data: OrdersDto}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPostApiOrderApiMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const putApiOrderApiId = (
    id: number,
    order: Order, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    return axios.put(
      `/api/OrderApi/${id}`,
      order,options
    );
  }



export const getPutApiOrderApiIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiOrderApiId>>, TError,{id: number;data: Order}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiOrderApiId>>, TError,{id: number;data: Order}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiOrderApiId>>, {id: number;data: Order}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiOrderApiId(id,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiOrderApiIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiOrderApiId>>>
    export type PutApiOrderApiIdMutationBody = Order
    export type PutApiOrderApiIdMutationError = AxiosError<unknown>

    export const usePutApiOrderApiId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiOrderApiId>>, TError,{id: number;data: Order}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPutApiOrderApiIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiOrdersDetailsApiId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OrderDetailsDto[]>> => {
    
    return axios.get(
      `/api/OrdersDetailsApi/${id}`,options
    );
  }


export const getGetApiOrdersDetailsApiIdQueryKey = (id: number,) => {
    return [`/api/OrdersDetailsApi/${id}`] as const;
    }

    
export const getGetApiOrdersDetailsApiIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiOrdersDetailsApiId>>, TError = AxiosError<unknown>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersDetailsApiId>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOrdersDetailsApiIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrdersDetailsApiId>>> = ({ signal }) => getApiOrdersDetailsApiId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersDetailsApiId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiOrdersDetailsApiIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOrdersDetailsApiId>>>
export type GetApiOrdersDetailsApiIdQueryError = AxiosError<unknown>

export const useGetApiOrdersDetailsApiId = <TData = Awaited<ReturnType<typeof getApiOrdersDetailsApiId>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiOrdersDetailsApiId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiOrdersDetailsApiIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiOrdersDetailsApi = (
    orderDetailsDto: OrderDetailsDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    return axios.post(
      `/api/OrdersDetailsApi`,
      orderDetailsDto,options
    );
  }



export const getPostApiOrdersDetailsApiMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrdersDetailsApi>>, TError,{data: OrderDetailsDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiOrdersDetailsApi>>, TError,{data: OrderDetailsDto}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOrdersDetailsApi>>, {data: OrderDetailsDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiOrdersDetailsApi(data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiOrdersDetailsApiMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOrdersDetailsApi>>>
    export type PostApiOrdersDetailsApiMutationBody = OrderDetailsDto
    export type PostApiOrdersDetailsApiMutationError = AxiosError<unknown>

    export const usePostApiOrdersDetailsApi = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrdersDetailsApi>>, TError,{data: OrderDetailsDto}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPostApiOrdersDetailsApiMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const putApiOrdersDetailsApiId = (
    id: number,
    orderDetail: OrderDetail, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    return axios.put(
      `/api/OrdersDetailsApi/${id}`,
      orderDetail,options
    );
  }



export const getPutApiOrdersDetailsApiIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiOrdersDetailsApiId>>, TError,{id: number;data: OrderDetail}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putApiOrdersDetailsApiId>>, TError,{id: number;data: OrderDetail}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiOrdersDetailsApiId>>, {id: number;data: OrderDetail}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiOrdersDetailsApiId(id,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiOrdersDetailsApiIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiOrdersDetailsApiId>>>
    export type PutApiOrdersDetailsApiIdMutationBody = OrderDetail
    export type PutApiOrdersDetailsApiIdMutationError = AxiosError<unknown>

    export const usePutApiOrdersDetailsApiId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiOrdersDetailsApiId>>, TError,{id: number;data: OrderDetail}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getPutApiOrdersDetailsApiIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getWeatherForecast = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<WeatherForecast[]>> => {
    
    return axios.get(
      `/WeatherForecast`,options
    );
  }


export const getGetWeatherForecastQueryKey = () => {
    return [`/WeatherForecast`] as const;
    }

    
export const getGetWeatherForecastQueryOptions = <TData = Awaited<ReturnType<typeof getWeatherForecast>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWeatherForecastQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWeatherForecast>>> = ({ signal }) => getWeatherForecast({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData> & { queryKey: QueryKey }
}

export type GetWeatherForecastQueryResult = NonNullable<Awaited<ReturnType<typeof getWeatherForecast>>>
export type GetWeatherForecastQueryError = AxiosError<unknown>

export const useGetWeatherForecast = <TData = Awaited<ReturnType<typeof getWeatherForecast>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getWeatherForecast>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetWeatherForecastQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




